// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: department.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepartmentClient is the client API for Department service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentClient interface {
	// 获取部门列表
	GetDepartmentList(ctx context.Context, in *GetDepartmentListRequest, opts ...grpc.CallOption) (*GetDepartmentListResponse, error)
	// 获取部门详情
	GetDepartmentDetail(ctx context.Context, in *GetDepartmentDetailRequest, opts ...grpc.CallOption) (*DepartmentResponse, error)
	// 创建部门
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*DepartmentResponse, error)
	// 更新部门
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除部门
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 只需要判断creator_id是否相同,即可确定主要角色
	GetMyDepartmentList(ctx context.Context, in *GetMyDepartmentListRequest, opts ...grpc.CallOption) (*GetDepartmentListResponse, error)
	// 全部人员分页
	GetDepartmentUserIdList(ctx context.Context, in *GetDepartmentUserListRequest, opts ...grpc.CallOption) (*GetDepartmentUserIdListResponse, error)
	// 加入部门
	CreateUserDepartment(ctx context.Context, in *SaveUserDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 人员部门表更新
	UpdateUserDepartment(ctx context.Context, in *SaveUserDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 人员部门删除(软删除)
	DeleteUserDepartment(ctx context.Context, in *DeleteUserDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type departmentClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentClient(cc grpc.ClientConnInterface) DepartmentClient {
	return &departmentClient{cc}
}

func (c *departmentClient) GetDepartmentList(ctx context.Context, in *GetDepartmentListRequest, opts ...grpc.CallOption) (*GetDepartmentListResponse, error) {
	out := new(GetDepartmentListResponse)
	err := c.cc.Invoke(ctx, "/Department/GetDepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetDepartmentDetail(ctx context.Context, in *GetDepartmentDetailRequest, opts ...grpc.CallOption) (*DepartmentResponse, error) {
	out := new(DepartmentResponse)
	err := c.cc.Invoke(ctx, "/Department/GetDepartmentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*DepartmentResponse, error) {
	out := new(DepartmentResponse)
	err := c.cc.Invoke(ctx, "/Department/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Department/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Department/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetMyDepartmentList(ctx context.Context, in *GetMyDepartmentListRequest, opts ...grpc.CallOption) (*GetDepartmentListResponse, error) {
	out := new(GetDepartmentListResponse)
	err := c.cc.Invoke(ctx, "/Department/GetMyDepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetDepartmentUserIdList(ctx context.Context, in *GetDepartmentUserListRequest, opts ...grpc.CallOption) (*GetDepartmentUserIdListResponse, error) {
	out := new(GetDepartmentUserIdListResponse)
	err := c.cc.Invoke(ctx, "/Department/GetDepartmentUserIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) CreateUserDepartment(ctx context.Context, in *SaveUserDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Department/CreateUserDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) UpdateUserDepartment(ctx context.Context, in *SaveUserDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Department/UpdateUserDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) DeleteUserDepartment(ctx context.Context, in *DeleteUserDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Department/DeleteUserDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServer is the server API for Department service.
// All implementations must embed UnimplementedDepartmentServer
// for forward compatibility
type DepartmentServer interface {
	// 获取部门列表
	GetDepartmentList(context.Context, *GetDepartmentListRequest) (*GetDepartmentListResponse, error)
	// 获取部门详情
	GetDepartmentDetail(context.Context, *GetDepartmentDetailRequest) (*DepartmentResponse, error)
	// 创建部门
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*DepartmentResponse, error)
	// 更新部门
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*emptypb.Empty, error)
	// 删除部门
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*emptypb.Empty, error)
	// 只需要判断creator_id是否相同,即可确定主要角色
	GetMyDepartmentList(context.Context, *GetMyDepartmentListRequest) (*GetDepartmentListResponse, error)
	// 全部人员分页
	GetDepartmentUserIdList(context.Context, *GetDepartmentUserListRequest) (*GetDepartmentUserIdListResponse, error)
	// 加入部门
	CreateUserDepartment(context.Context, *SaveUserDepartmentRequest) (*emptypb.Empty, error)
	// 人员部门表更新
	UpdateUserDepartment(context.Context, *SaveUserDepartmentRequest) (*emptypb.Empty, error)
	// 人员部门删除(软删除)
	DeleteUserDepartment(context.Context, *DeleteUserDepartmentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDepartmentServer()
}

// UnimplementedDepartmentServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentServer struct {
}

func (UnimplementedDepartmentServer) GetDepartmentList(context.Context, *GetDepartmentListRequest) (*GetDepartmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentList not implemented")
}
func (UnimplementedDepartmentServer) GetDepartmentDetail(context.Context, *GetDepartmentDetailRequest) (*DepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentDetail not implemented")
}
func (UnimplementedDepartmentServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*DepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedDepartmentServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedDepartmentServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedDepartmentServer) GetMyDepartmentList(context.Context, *GetMyDepartmentListRequest) (*GetDepartmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDepartmentList not implemented")
}
func (UnimplementedDepartmentServer) GetDepartmentUserIdList(context.Context, *GetDepartmentUserListRequest) (*GetDepartmentUserIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentUserIdList not implemented")
}
func (UnimplementedDepartmentServer) CreateUserDepartment(context.Context, *SaveUserDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDepartment not implemented")
}
func (UnimplementedDepartmentServer) UpdateUserDepartment(context.Context, *SaveUserDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDepartment not implemented")
}
func (UnimplementedDepartmentServer) DeleteUserDepartment(context.Context, *DeleteUserDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDepartment not implemented")
}
func (UnimplementedDepartmentServer) mustEmbedUnimplementedDepartmentServer() {}

// UnsafeDepartmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentServer will
// result in compilation errors.
type UnsafeDepartmentServer interface {
	mustEmbedUnimplementedDepartmentServer()
}

func RegisterDepartmentServer(s grpc.ServiceRegistrar, srv DepartmentServer) {
	s.RegisterService(&Department_ServiceDesc, srv)
}

func _Department_GetDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/GetDepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentList(ctx, req.(*GetDepartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetDepartmentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/GetDepartmentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentDetail(ctx, req.(*GetDepartmentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetMyDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyDepartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetMyDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/GetMyDepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetMyDepartmentList(ctx, req.(*GetMyDepartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetDepartmentUserIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentUserIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/GetDepartmentUserIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentUserIdList(ctx, req.(*GetDepartmentUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_CreateUserDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).CreateUserDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/CreateUserDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).CreateUserDepartment(ctx, req.(*SaveUserDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_UpdateUserDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).UpdateUserDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/UpdateUserDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).UpdateUserDepartment(ctx, req.(*SaveUserDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_DeleteUserDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).DeleteUserDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Department/DeleteUserDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).DeleteUserDepartment(ctx, req.(*DeleteUserDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Department_ServiceDesc is the grpc.ServiceDesc for Department service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Department_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Department",
	HandlerType: (*DepartmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDepartmentList",
			Handler:    _Department_GetDepartmentList_Handler,
		},
		{
			MethodName: "GetDepartmentDetail",
			Handler:    _Department_GetDepartmentDetail_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _Department_CreateDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Department_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Department_DeleteDepartment_Handler,
		},
		{
			MethodName: "GetMyDepartmentList",
			Handler:    _Department_GetMyDepartmentList_Handler,
		},
		{
			MethodName: "GetDepartmentUserIdList",
			Handler:    _Department_GetDepartmentUserIdList_Handler,
		},
		{
			MethodName: "CreateUserDepartment",
			Handler:    _Department_CreateUserDepartment_Handler,
		},
		{
			MethodName: "UpdateUserDepartment",
			Handler:    _Department_UpdateUserDepartment_Handler,
		},
		{
			MethodName: "DeleteUserDepartment",
			Handler:    _Department_DeleteUserDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "department.proto",
}
