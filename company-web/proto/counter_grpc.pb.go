// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: counter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyCounterClient is the client API for CompanyCounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyCounterClient interface {
	// -----------------------统计服务---
	// 统计一共多少个公司
	CountCompany(ctx context.Context, in *CountCompanyRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error)
	// 统计某公司多少人
	CountCompanyUser(ctx context.Context, in *CountCompanyUserRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error)
	// 统计公司有多少个部门
	CountDepartment(ctx context.Context, in *CountDepartmentRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error)
	// 统计部门人数
	CountDepartmentUser(ctx context.Context, in *CountDepartmentUserRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error)
}

type companyCounterClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyCounterClient(cc grpc.ClientConnInterface) CompanyCounterClient {
	return &companyCounterClient{cc}
}

func (c *companyCounterClient) CountCompany(ctx context.Context, in *CountCompanyRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error) {
	out := new(CompanyCountResponse)
	err := c.cc.Invoke(ctx, "/CompanyCounter/CountCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCounterClient) CountCompanyUser(ctx context.Context, in *CountCompanyUserRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error) {
	out := new(CompanyCountResponse)
	err := c.cc.Invoke(ctx, "/CompanyCounter/CountCompanyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCounterClient) CountDepartment(ctx context.Context, in *CountDepartmentRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error) {
	out := new(CompanyCountResponse)
	err := c.cc.Invoke(ctx, "/CompanyCounter/CountDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCounterClient) CountDepartmentUser(ctx context.Context, in *CountDepartmentUserRequest, opts ...grpc.CallOption) (*CompanyCountResponse, error) {
	out := new(CompanyCountResponse)
	err := c.cc.Invoke(ctx, "/CompanyCounter/CountDepartmentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyCounterServer is the server API for CompanyCounter service.
// All implementations must embed UnimplementedCompanyCounterServer
// for forward compatibility
type CompanyCounterServer interface {
	// -----------------------统计服务---
	// 统计一共多少个公司
	CountCompany(context.Context, *CountCompanyRequest) (*CompanyCountResponse, error)
	// 统计某公司多少人
	CountCompanyUser(context.Context, *CountCompanyUserRequest) (*CompanyCountResponse, error)
	// 统计公司有多少个部门
	CountDepartment(context.Context, *CountDepartmentRequest) (*CompanyCountResponse, error)
	// 统计部门人数
	CountDepartmentUser(context.Context, *CountDepartmentUserRequest) (*CompanyCountResponse, error)
	mustEmbedUnimplementedCompanyCounterServer()
}

// UnimplementedCompanyCounterServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyCounterServer struct {
}

func (UnimplementedCompanyCounterServer) CountCompany(context.Context, *CountCompanyRequest) (*CompanyCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCompany not implemented")
}
func (UnimplementedCompanyCounterServer) CountCompanyUser(context.Context, *CountCompanyUserRequest) (*CompanyCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCompanyUser not implemented")
}
func (UnimplementedCompanyCounterServer) CountDepartment(context.Context, *CountDepartmentRequest) (*CompanyCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDepartment not implemented")
}
func (UnimplementedCompanyCounterServer) CountDepartmentUser(context.Context, *CountDepartmentUserRequest) (*CompanyCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDepartmentUser not implemented")
}
func (UnimplementedCompanyCounterServer) mustEmbedUnimplementedCompanyCounterServer() {}

// UnsafeCompanyCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyCounterServer will
// result in compilation errors.
type UnsafeCompanyCounterServer interface {
	mustEmbedUnimplementedCompanyCounterServer()
}

func RegisterCompanyCounterServer(s grpc.ServiceRegistrar, srv CompanyCounterServer) {
	s.RegisterService(&CompanyCounter_ServiceDesc, srv)
}

func _CompanyCounter_CountCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCounterServer).CountCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyCounter/CountCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCounterServer).CountCompany(ctx, req.(*CountCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCounter_CountCompanyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCompanyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCounterServer).CountCompanyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyCounter/CountCompanyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCounterServer).CountCompanyUser(ctx, req.(*CountCompanyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCounter_CountDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCounterServer).CountDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyCounter/CountDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCounterServer).CountDepartment(ctx, req.(*CountDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCounter_CountDepartmentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDepartmentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCounterServer).CountDepartmentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyCounter/CountDepartmentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCounterServer).CountDepartmentUser(ctx, req.(*CountDepartmentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyCounter_ServiceDesc is the grpc.ServiceDesc for CompanyCounter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyCounter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompanyCounter",
	HandlerType: (*CompanyCounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCompany",
			Handler:    _CompanyCounter_CountCompany_Handler,
		},
		{
			MethodName: "CountCompanyUser",
			Handler:    _CompanyCounter_CountCompanyUser_Handler,
		},
		{
			MethodName: "CountDepartment",
			Handler:    _CompanyCounter_CountDepartment_Handler,
		},
		{
			MethodName: "CountDepartmentUser",
			Handler:    _CompanyCounter_CountDepartmentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter.proto",
}
