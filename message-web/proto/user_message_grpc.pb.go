// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user_message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserMessageClient is the client API for UserMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMessageClient interface {
	// 获取消息列表
	GetMessageList(ctx context.Context, in *GetMessageListRequest, opts ...grpc.CallOption) (*MessageListResponse, error)
	// 创建消息
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// 更新消息
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除消息
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//消息详情
	GetMessageDetail(ctx context.Context, in *GetMessageDetailRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type userMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMessageClient(cc grpc.ClientConnInterface) UserMessageClient {
	return &userMessageClient{cc}
}

func (c *userMessageClient) GetMessageList(ctx context.Context, in *GetMessageListRequest, opts ...grpc.CallOption) (*MessageListResponse, error) {
	out := new(MessageListResponse)
	err := c.cc.Invoke(ctx, "/UserMessage/GetMessageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMessageClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/UserMessage/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMessageClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/UserMessage/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMessageClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/UserMessage/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMessageClient) GetMessageDetail(ctx context.Context, in *GetMessageDetailRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/UserMessage/GetMessageDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMessageServer is the server API for UserMessage service.
// All implementations must embed UnimplementedUserMessageServer
// for forward compatibility
type UserMessageServer interface {
	// 获取消息列表
	GetMessageList(context.Context, *GetMessageListRequest) (*MessageListResponse, error)
	// 创建消息
	CreateMessage(context.Context, *CreateMessageRequest) (*MessageResponse, error)
	// 更新消息
	UpdateMessage(context.Context, *UpdateMessageRequest) (*emptypb.Empty, error)
	// 删除消息
	DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error)
	//消息详情
	GetMessageDetail(context.Context, *GetMessageDetailRequest) (*MessageResponse, error)
	mustEmbedUnimplementedUserMessageServer()
}

// UnimplementedUserMessageServer must be embedded to have forward compatible implementations.
type UnimplementedUserMessageServer struct {
}

func (UnimplementedUserMessageServer) GetMessageList(context.Context, *GetMessageListRequest) (*MessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageList not implemented")
}
func (UnimplementedUserMessageServer) CreateMessage(context.Context, *CreateMessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedUserMessageServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedUserMessageServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedUserMessageServer) GetMessageDetail(context.Context, *GetMessageDetailRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageDetail not implemented")
}
func (UnimplementedUserMessageServer) mustEmbedUnimplementedUserMessageServer() {}

// UnsafeUserMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMessageServer will
// result in compilation errors.
type UnsafeUserMessageServer interface {
	mustEmbedUnimplementedUserMessageServer()
}

func RegisterUserMessageServer(s grpc.ServiceRegistrar, srv UserMessageServer) {
	s.RegisterService(&UserMessage_ServiceDesc, srv)
}

func _UserMessage_GetMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMessageServer).GetMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserMessage/GetMessageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMessageServer).GetMessageList(ctx, req.(*GetMessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMessage_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMessageServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserMessage/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMessageServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMessage_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMessageServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserMessage/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMessageServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMessage_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMessageServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserMessage/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMessageServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMessage_GetMessageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMessageServer).GetMessageDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserMessage/GetMessageDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMessageServer).GetMessageDetail(ctx, req.(*GetMessageDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMessage_ServiceDesc is the grpc.ServiceDesc for UserMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserMessage",
	HandlerType: (*UserMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessageList",
			Handler:    _UserMessage_GetMessageList_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _UserMessage_CreateMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _UserMessage_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _UserMessage_DeleteMessage_Handler,
		},
		{
			MethodName: "GetMessageDetail",
			Handler:    _UserMessage_GetMessageDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_message.proto",
}
