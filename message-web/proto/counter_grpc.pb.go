// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: counter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageCounterClient is the client API for MessageCounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageCounterClient interface {
	CountUserMessage(ctx context.Context, in *CountUserMessageRequest, opts ...grpc.CallOption) (*CountUserMessageResponse, error)
}

type messageCounterClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageCounterClient(cc grpc.ClientConnInterface) MessageCounterClient {
	return &messageCounterClient{cc}
}

func (c *messageCounterClient) CountUserMessage(ctx context.Context, in *CountUserMessageRequest, opts ...grpc.CallOption) (*CountUserMessageResponse, error) {
	out := new(CountUserMessageResponse)
	err := c.cc.Invoke(ctx, "/MessageCounter/CountUserMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageCounterServer is the server API for MessageCounter service.
// All implementations must embed UnimplementedMessageCounterServer
// for forward compatibility
type MessageCounterServer interface {
	CountUserMessage(context.Context, *CountUserMessageRequest) (*CountUserMessageResponse, error)
	mustEmbedUnimplementedMessageCounterServer()
}

// UnimplementedMessageCounterServer must be embedded to have forward compatible implementations.
type UnimplementedMessageCounterServer struct {
}

func (UnimplementedMessageCounterServer) CountUserMessage(context.Context, *CountUserMessageRequest) (*CountUserMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserMessage not implemented")
}
func (UnimplementedMessageCounterServer) mustEmbedUnimplementedMessageCounterServer() {}

// UnsafeMessageCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageCounterServer will
// result in compilation errors.
type UnsafeMessageCounterServer interface {
	mustEmbedUnimplementedMessageCounterServer()
}

func RegisterMessageCounterServer(s grpc.ServiceRegistrar, srv MessageCounterServer) {
	s.RegisterService(&MessageCounter_ServiceDesc, srv)
}

func _MessageCounter_CountUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageCounterServer).CountUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageCounter/CountUserMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageCounterServer).CountUserMessage(ctx, req.(*CountUserMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageCounter_ServiceDesc is the grpc.ServiceDesc for MessageCounter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageCounter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageCounter",
	HandlerType: (*MessageCounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountUserMessage",
			Handler:    _MessageCounter_CountUserMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter.proto",
}
